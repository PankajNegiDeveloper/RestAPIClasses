package com.rest.blog.service.impl;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.rest.blog.dto.CommentsDto;
import com.rest.blog.entity.BlogPost;
import com.rest.blog.entity.Comments;
import com.rest.blog.exception.NoResourceFoundException;
import com.rest.blog.repository.BlogPostRepo;
import com.rest.blog.repository.CommentsRepo;
import com.rest.blog.service.CommentsService;

@Service
public class CommentsServiceImpl implements CommentsService {

	@Autowired
	private CommentsRepo commentsRepo;

	@Autowired
	private BlogPostRepo blogPostrepo;

	@Autowired
	public CommentsServiceImpl(CommentsRepo commentsRepo) {
		super();
		this.commentsRepo = commentsRepo;
	}

	// ************************************************************
	private Comments mapDtoToEntity(CommentsDto commentsDto) {
		Comments comment = new Comments();
		comment.setComment(commentsDto.getComment());

		// Fetch the BlogPost entity using the correct ID

		// commentsDto.getBlogPost() Retrieves the blog post ID from the CommentsDto.
		// This ID is needed to associate the comment with the correct blog post.
		BlogPost blogPost = blogPostrepo.findById(commentsDto.getBlogPost())
				.orElseThrow(() -> new NoResourceFoundException("BlogPost", "ID", commentsDto.getBlogPost()));
		comment.setBlogPost(blogPost);

		return comment;
	}

	private CommentsDto mapEntityToDto(Comments comment) {
		CommentsDto commentDto = new CommentsDto();
		commentDto.setCommId(comment.getCommId()); // Set auto-generated Comment ID
		commentDto.setComment(comment.getComment());
		commentDto.setBlogPost(comment.getBlogPost().getBlogsId()); // Set BlogPost ID
		return commentDto;
	}

	// ***************************************************************

	// creating comment
	@Override
	public CommentsDto createComment(CommentsDto commentsDto) {
		Comments comment = new Comments();
		comment = commentsRepo.save(mapDtoToEntity(commentsDto));
		return mapEntityToDto(comment);
	}

	// finding comment by id
	@Override
	public CommentsDto findCommentById(Integer id) {
		Optional<Comments> findById = commentsRepo.findById(id);
		Comments comm = findById.orElseThrow(() -> new NoResourceFoundException("Comment", "Id", id));
		return mapEntityToDto(comm);
	}

	// finding all comments
	@Override
	public List<CommentsDto> getAllComments(Integer postId) {
		Optional<BlogPost> byId = blogPostrepo.findById(postId);
		BlogPost blogPost = byId.orElseThrow(() -> new NoResourceFoundException("Comments", "Id", postId));
		List<Comments> comments = commentsRepo.findByBlogPost(blogPost);
		return comments.stream().map(comment -> mapEntityToDto(comment)).toList();
	}

}
